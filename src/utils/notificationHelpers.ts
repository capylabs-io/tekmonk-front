import { NotificationType } from "@/types/notification";
import { User } from "@/types/common-types";

export const formatNotificationText = (
  type: NotificationType,
  actor: User | undefined,
  count: number
): string => {
  if (!actor) return "";

  const actorName = actor.username || "Ng∆∞·ªùi d√πng";

  if (count <= 1) {
    // Single user action
    switch (type) {
      case NotificationType.LIKE:
        return `${actorName} ƒë√£ th√≠ch b√†i vi·∫øt c·ªßa b·∫°n`;
      case NotificationType.COMMENT:
        return `${actorName} ƒë√£ b√¨nh lu·∫≠n b√†i vi·∫øt c·ªßa b·∫°n`;
      default:
        return `${actorName} ƒë√£ t∆∞∆°ng t√°c v·ªõi b√†i vi·∫øt c·ªßa b·∫°n`;
    }
  } else {
    // Multiple users action
    const otherCount = count - 1;
    switch (type) {
      case NotificationType.LIKE:
        return `${actorName} v√† ${otherCount} ng∆∞·ªùi kh√°c ƒë√£ th√≠ch b√†i vi·∫øt c·ªßa b·∫°n`;
      case NotificationType.COMMENT:
        return `${actorName} v√† ${otherCount} ng∆∞·ªùi kh√°c ƒë√£ b√¨nh lu·∫≠n b√†i vi·∫øt c·ªßa b·∫°n`;
      default:
        return `${actorName} v√† ${otherCount} ng∆∞·ªùi kh√°c ƒë√£ t∆∞∆°ng t√°c v·ªõi b√†i vi·∫øt c·ªßa b·∫°n`;
    }
  }
};

export const getNotificationIcon = (type: NotificationType): string => {
  switch (type) {
    case NotificationType.LIKE:
      return "‚ù§Ô∏è";
    case NotificationType.COMMENT:
      return "üí¨";
    case NotificationType.POST_CREATED:
      return "üìù";
    case NotificationType.POST_ACCEPTED:
      return "‚úÖ";
    case NotificationType.POST_DENIED:
      return "‚ùå";
    case NotificationType.ACHIEVEMENT:
      return "üèÜ";
    case NotificationType.MISSION:
      return "üéØ";
    case NotificationType.EXCHANGE_ITEMS:
      return "üîÑ";
    default:
      return "üëç";
  }
};

export const truncateText = (text: string, maxLength: number = 50): string => {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength) + "...";
};
